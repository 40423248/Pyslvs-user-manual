var tipuesearch = {"pages":[{"tags":"misc","url":"./pages/about/","text":"2017Spring 機械設計工程系協同產品設計實習 課程倉儲: http://github.com/mdecourse/2017springcd 課程投影片: http://mdecourse.github.io/2017springcd 課程網誌: http://mdecourse.github.io/2017springcd/blog","title":"About"},{"tags":"Course","url":"./2017springCD-Week18.html","text":"第十八週上課內容 W18 1.大概的介紹自己在其中之後做了哪些事 2.以下連結到行走機構和Onshape網址: 期末行走機構(倉儲網誌) 期末行走機構(Onshape) 期末行走機構2(Onshape) 3.行走機構的近況: 已經印出了大部分的零件,但是在本體的部分還在處理中 以下為印出來的零件 大齒輪和小齒輪(由馬達帶動的減速機構): 腳部零件: 關節連桿: 連接軸: 軸與孔配合的問題: 原來是用剛好的過渡配合,但在組合時發現變成干涉配合,軸幾乎穿不過去,需要用銼刀打磨後才穿的過去 這是還沒打磨前: 這是打磨之後:","title":"2017CD第十八週"},{"tags":"Course","url":"./2017springCD-Week17.html","text":"第十七週上課內容 W17 1.solvespace測繪 2.solvespace實習查驗題目 2017CD 第十七週 近端零組件繪圖 https://vimeo.com/223560158 solvespace實習查驗題目2D程式碼 window.onload=function(){ // 設定 data/py 為共用程式路徑 brython({debug:1, pythonpath:['./../data/py']}); } ѲԓolveSpaceREVa Group.h.v=00000001 Group.type=5000 Group.name=#references Group.color=ff000000 Group.skipFirst=0 Group.predef.swapUV=0 Group.predef.negateU=0 Group.predef.negateV=0 Group.visible=1 Group.suppress=0 Group.relaxConstraints=0 Group.allowRedundant=0 Group.allDimsReference=0 Group.remap={ } AddGroup Group.h.v=00000002 Group.type=5001 Group.order=1 Group.name=sketch-in-plane Group.activeWorkplane.v=80020000 Group.color=ff000000 Group.subtype=6000 Group.skipFirst=0 Group.predef.q.w=1.00000000000000000000 Group.predef.origin.v=00010001 Group.predef.swapUV=0 Group.predef.negateU=0 Group.predef.negateV=0 Group.visible=1 Group.suppress=0 Group.relaxConstraints=0 Group.allowRedundant=0 Group.allDimsReference=0 Group.remap={ } AddGroup Param.h.v.=00010010 AddParam Param.h.v.=00010011 AddParam Param.h.v.=00010012 AddParam Param.h.v.=00010020 Param.val=1.00000000000000000000 AddParam Param.h.v.=00010021 AddParam Param.h.v.=00010022 AddParam Param.h.v.=00010023 AddParam Param.h.v.=00020010 AddParam Param.h.v.=00020011 AddParam Param.h.v.=00020012 AddParam Param.h.v.=00020020 Param.val=0.50000000000000000000 AddParam Param.h.v.=00020021 Param.val=0.50000000000000000000 AddParam Param.h.v.=00020022 Param.val=0.50000000000000000000 AddParam Param.h.v.=00020023 Param.val=0.50000000000000000000 AddParam Param.h.v.=00030010 AddParam Param.h.v.=00030011 AddParam Param.h.v.=00030012 AddParam Param.h.v.=00030020 Param.val=0.50000000000000000000 AddParam Param.h.v.=00030021 Param.val=-0.50000000000000000000 AddParam Param.h.v.=00030022 Param.val=-0.50000000000000000000 AddParam Param.h.v.=00030023 Param.val=-0.50000000000000000000 AddParam Param.h.v.=00040010 AddParam Param.h.v.=00040011 AddParam Param.h.v.=00040013 AddParam Param.h.v.=00040014 Param.val=80.00000000000000000000 AddParam Param.h.v.=00050010 AddParam Param.h.v.=00050011 Param.val=80.00000000000000000000 AddParam Param.h.v.=00050040 Param.val=4.00000000000000000000 AddParam Param.h.v.=00060010 Param.val=-2.04029741858678370000 AddParam Param.h.v.=00060011 Param.val=90.77437638305382000000 AddParam Param.h.v.=00060013 Param.val=-55.66644587946780800000 AddParam Param.h.v.=00060014 Param.val=6.36918577695693160000 AddParam Param.h.v.=00070010 Param.val=-55.66644587946780800000 AddParam Param.h.v.=00070011 Param.val=6.36918577695693160000 AddParam Param.h.v.=00070013 Param.val=-43.00566728855328300000 AddParam Param.h.v.=00070014 Param.val=-1.67473649217521920000 AddParam Param.h.v.=00080010 Param.val=-43.00566728855328300000 AddParam Param.h.v.=00080011 Param.val=-1.67473649217521920000 AddParam Param.h.v.=00080013 Param.val=10.62048117232775200000 AddParam Param.h.v.=00080014 Param.val=82.73045411392166700000 AddParam Param.h.v.=00090010 Param.val=10.62048117232775200000 AddParam Param.h.v.=00090011 Param.val=82.73045411392166700000 AddParam Param.h.v.=00090013 Param.val=-2.04029741858678370000 AddParam Param.h.v.=00090014 Param.val=90.77437638305382000000 AddParam Param.h.v.=000a0010 Param.val=-2.04029741858678370000 AddParam Param.h.v.=000a0011 Param.val=90.77437638305382000000 AddParam Param.h.v.=000a0013 Param.val=78.73325952245106400000 AddParam Param.h.v.=000a0014 Param.val=31.81988122710396300000 AddParam Param.h.v.=000b0010 Param.val=78.73325952245106400000 AddParam Param.h.v.=000b0011 Param.val=31.81988122710396300000 AddParam Param.h.v.=000b0013 Param.val=69.89008524905857200000 AddParam Param.h.v.=000b0014 Param.val=19.70384768594829300000 AddParam Param.h.v.=000c0010 Param.val=69.89008524905857200000 AddParam Param.h.v.=000c0011 Param.val=19.70384768594829300000 AddParam Param.h.v.=000c0013 Param.val=-10.88347169197927000000 AddParam Param.h.v.=000c0014 Param.val=78.65834284189816100000 AddParam Param.h.v.=000d0010 Param.val=-10.88347169197927000000 AddParam Param.h.v.=000d0011 Param.val=78.65834284189816100000 AddParam Param.h.v.=000d0013 Param.val=-2.04029741858678370000 AddParam Param.h.v.=000d0014 Param.val=90.77437638305382000000 AddParam Request.h.v=00000001 Request.type=100 Request.group.v=00000001 Request.construction=0 AddRequest Request.h.v=00000002 Request.type=100 Request.group.v=00000001 Request.construction=0 AddRequest Request.h.v=00000003 Request.type=100 Request.group.v=00000001 Request.construction=0 AddRequest Request.h.v=00000004 Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=00000005 Request.type=400 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=00000006 Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=00000007 Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=00000008 Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=00000009 Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=0000000a Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=0000000b Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=0000000c Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=0000000d Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Entity.h.v=00010000 Entity.type=10000 Entity.construction=0 Entity.point[0].v=00010001 Entity.normal.v=00010020 Entity.actVisible=1 AddEntity Entity.h.v=00010001 Entity.type=2000 Entity.construction=0 Entity.actVisible=1 AddEntity Entity.h.v=00010020 Entity.type=3000 Entity.construction=0 Entity.point[0].v=00010001 Entity.actNormal.w=1.00000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=00020000 Entity.type=10000 Entity.construction=0 Entity.point[0].v=00020001 Entity.normal.v=00020020 Entity.actVisible=1 AddEntity Entity.h.v=00020001 Entity.type=2000 Entity.construction=0 Entity.actVisible=1 AddEntity Entity.h.v=00020020 Entity.type=3000 Entity.construction=0 Entity.point[0].v=00020001 Entity.actNormal.w=0.50000000000000000000 Entity.actNormal.vx=0.50000000000000000000 Entity.actNormal.vy=0.50000000000000000000 Entity.actNormal.vz=0.50000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=00030000 Entity.type=10000 Entity.construction=0 Entity.point[0].v=00030001 Entity.normal.v=00030020 Entity.actVisible=1 AddEntity Entity.h.v=00030001 Entity.type=2000 Entity.construction=0 Entity.actVisible=1 AddEntity Entity.h.v=00030020 Entity.type=3000 Entity.construction=0 Entity.point[0].v=00030001 Entity.actNormal.w=0.50000000000000000000 Entity.actNormal.vx=-0.50000000000000000000 Entity.actNormal.vy=-0.50000000000000000000 Entity.actNormal.vz=-0.50000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=00040000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=00040001 Entity.point[1].v=00040002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00040001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00040002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.y=80.00000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=00050000 Entity.type=13000 Entity.construction=0 Entity.point[0].v=00050001 Entity.normal.v=00050020 Entity.distance.v=00050040 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00050001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.y=80.00000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=00050020 Entity.type=3001 Entity.construction=0 Entity.point[0].v=00050001 Entity.workplane.v=80020000 Entity.actNormal.w=1.00000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=00050040 Entity.type=4000 Entity.construction=0 Entity.workplane.v=80020000 Entity.actDistance=4.00000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=00060000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=00060001 Entity.point[1].v=00060002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00060001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-2.04029741858678370000 Entity.actPoint.y=90.77437638305382000000 Entity.actVisible=1 AddEntity Entity.h.v=00060002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-55.66644587946780800000 Entity.actPoint.y=6.36918577695693160000 Entity.actVisible=1 AddEntity Entity.h.v=00070000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=00070001 Entity.point[1].v=00070002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00070001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-55.66644587946780800000 Entity.actPoint.y=6.36918577695693160000 Entity.actVisible=1 AddEntity Entity.h.v=00070002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-43.00566728855328300000 Entity.actPoint.y=-1.67473649217521920000 Entity.actVisible=1 AddEntity Entity.h.v=00080000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=00080001 Entity.point[1].v=00080002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00080001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-43.00566728855328300000 Entity.actPoint.y=-1.67473649217521920000 Entity.actVisible=1 AddEntity Entity.h.v=00080002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=10.62048117232775200000 Entity.actPoint.y=82.73045411392166700000 Entity.actVisible=1 AddEntity Entity.h.v=00090000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=00090001 Entity.point[1].v=00090002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00090001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=10.62048117232775200000 Entity.actPoint.y=82.73045411392166700000 Entity.actVisible=1 AddEntity Entity.h.v=00090002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-2.04029741858678370000 Entity.actPoint.y=90.77437638305382000000 Entity.actVisible=1 AddEntity Entity.h.v=000a0000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=000a0001 Entity.point[1].v=000a0002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=000a0001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-2.04029741858678370000 Entity.actPoint.y=90.77437638305382000000 Entity.actVisible=1 AddEntity Entity.h.v=000a0002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=78.73325952245106400000 Entity.actPoint.y=31.81988122710396300000 Entity.actVisible=1 AddEntity Entity.h.v=000b0000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=000b0001 Entity.point[1].v=000b0002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=000b0001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=78.73325952245106400000 Entity.actPoint.y=31.81988122710396300000 Entity.actVisible=1 AddEntity Entity.h.v=000b0002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=69.89008524905857200000 Entity.actPoint.y=19.70384768594829300000 Entity.actVisible=1 AddEntity Entity.h.v=000c0000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=000c0001 Entity.point[1].v=000c0002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=000c0001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=69.89008524905857200000 Entity.actPoint.y=19.70384768594829300000 Entity.actVisible=1 AddEntity Entity.h.v=000c0002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-10.88347169197927000000 Entity.actPoint.y=78.65834284189816100000 Entity.actVisible=1 AddEntity Entity.h.v=000d0000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=000d0001 Entity.point[1].v=000d0002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=000d0001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-10.88347169197927000000 Entity.actPoint.y=78.65834284189816100000 Entity.actVisible=1 AddEntity Entity.h.v=000d0002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-2.04029741858678370000 Entity.actPoint.y=90.77437638305382000000 Entity.actVisible=1 AddEntity Entity.h.v=80020000 Entity.type=10000 Entity.construction=0 Entity.point[0].v=80020002 Entity.normal.v=80020001 Entity.actVisible=1 AddEntity Entity.h.v=80020001 Entity.type=3010 Entity.construction=0 Entity.point[0].v=80020002 Entity.actNormal.w=1.00000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=80020002 Entity.type=2012 Entity.construction=0 Entity.actVisible=1 AddEntity Constraint.h.v=00000001 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00010001 Constraint.ptB.v=00040001 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000002 Constraint.type=81 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.entityA.v=00040000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000003 Constraint.type=30 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=80.00000000000000000000 Constraint.ptA.v=00040001 Constraint.ptB.v=00040002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=10.00000000000000000000 AddConstraint Constraint.h.v=00000004 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00040002 Constraint.ptB.v=00050001 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000005 Constraint.type=90 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=8.00000000000000000000 Constraint.entityA.v=00050000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=7.58520643669636740000 Constraint.disp.offset.y=1.62086274062766210000 Constraint.disp.offset.z=-0.16174862928051512000 AddConstraint Constraint.h.v=00000006 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00060002 Constraint.ptB.v=00070001 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000007 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00070002 Constraint.ptB.v=00080001 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000008 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00080002 Constraint.ptB.v=00090001 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000009 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00060001 Constraint.ptB.v=00090002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=0000000a Constraint.type=121 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.entityA.v=00090000 Constraint.entityB.v=00070000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=0000000b Constraint.type=121 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.entityA.v=00060000 Constraint.entityB.v=00080000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=0000000c Constraint.type=30 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=15.00000000000000000000 Constraint.ptA.v=00090001 Constraint.ptB.v=00090002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=8.46603698254893010000 Constraint.disp.offset.y=20.65235911096176500000 AddConstraint Constraint.h.v=0000000d Constraint.type=32 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=-8.00000000000000000000 Constraint.ptA.v=00040002 Constraint.entityA.v=00090000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=-21.44265208568373300000 Constraint.disp.offset.y=9.45641845922824410000 Constraint.disp.offset.z=0.12541633586139753000 AddConstraint Constraint.h.v=0000000e Constraint.type=30 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=100.00000000000000000000 Constraint.ptA.v=00060001 Constraint.ptB.v=00060002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=-27.64217844119312800000 Constraint.disp.offset.y=16.82288325365299600000 AddConstraint Constraint.h.v=0000000f Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00060001 Constraint.ptB.v=000a0001 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000010 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=000a0002 Constraint.ptB.v=000b0001 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000011 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=000b0002 Constraint.ptB.v=000c0001 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000012 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=000c0002 Constraint.ptB.v=000d0001 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000013 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00060001 Constraint.ptB.v=000d0002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000014 Constraint.type=121 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.entityA.v=000a0000 Constraint.entityB.v=000c0000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000015 Constraint.type=121 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.entityA.v=000d0000 Constraint.entityB.v=000b0000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000016 Constraint.type=32 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=8.00000000000000000000 Constraint.ptA.v=00040002 Constraint.entityA.v=000d0000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=-7.28703200978878840000 Constraint.disp.offset.y=-12.40269787623139300000 Constraint.disp.offset.z=-0.15667728088880342000 AddConstraint Constraint.h.v=00000017 Constraint.type=30 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=100.00000000000000000000 Constraint.ptA.v=000a0001 Constraint.ptB.v=000a0002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=20.16283652001594700000 Constraint.disp.offset.y=12.51715994004927000000 Constraint.disp.offset.z=0.09104890556797716500 AddConstraint Constraint.h.v=00000018 Constraint.type=30 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=15.00000000000000000000 Constraint.ptA.v=000b0001 Constraint.ptB.v=000b0002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=15.78209719715064100000 Constraint.disp.offset.y=-7.03721318405242440000 Constraint.disp.offset.z=-0.19319519734179133000 AddConstraint Constraint.h.v=00000019 Constraint.type=32 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=-7.50000000000000000000 Constraint.ptA.v=00040002 Constraint.entityA.v=00080000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=-13.18140367224296500000 Constraint.disp.offset.y=-19.93175256385726300000 Constraint.disp.offset.z=-0.24408617544595643000 AddConstraint Constraint.h.v=0000001a Constraint.type=32 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=7.50000000000000000000 Constraint.ptA.v=00040002 Constraint.entityA.v=000a0000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=-2.68776749167860630000 Constraint.disp.offset.y=3.01324085541669810000 Constraint.disp.offset.z=0.06141075263139578200 AddConstraint Constraint.h.v=0000001b Constraint.type=122 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.entityA.v=00070000 Constraint.entityB.v=00080000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint ctx.restore() 3.把https://github.com/scrum-1/cdbw17這個倉儲設為subw17子目錄","title":"2017CD第十七週"},{"tags":"Course","url":"./2017springCD-Week16.html","text":"第十六週上課內容 W16 1.老師介紹怎麼用Xming來連結Fossil伺服器 2.去聽學長們的專題發表","title":"2017CD第十六週"},{"tags":"Course","url":"./2017springCD-Week15-2.html","text":"第十五週上課內容-2 準備仿生獸活動軸所需的材料,前往松億螺絲尋找適合的材料,在裡面找一找發現 原來的設計需要修改許多地方,因為店內有的螺栓和螺絲尺寸大多數都是整數的, 有小數點的都屬於特規,數量少,價格也貴,而我們原來的軸孔部分的尺寸都有小數 點,所以還要再另外花時間在修改成整數位的尺寸,才可以做配合 松億螺絲: 地址:632雲林縣虎尾鎮光明路66號 營業時間:週一至周五 早上8:10至下午17:10 電話:05-632-2204","title":"2017CD第十五週-2"},{"tags":"Course","url":"./2017springCD-Week15.html","text":"第十五週上課內容 W15 1.用 Brython來繪製單一個正齒輪的輪廓 window.onload=function(){ // 設定 data/py 為共用程式路徑 brython({debug:1, pythonpath:['./../data/py']}); } from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) canvas = doc['onegear'] ctx = canvas.getContext(\"2d\") x = (500)/2 y = (500)/2 r = 0.8*(500/2) # 齒數 n = 36 # 壓力角 pa = 20 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") ctx.beginPath() ctx.fillStyle = \" #2894FF\" ctx.font = \"35px ScriptS\" ctx.fillText(\"40423248 \",200,240) ctx.stroke() 2.用 Brython來繪製單一半正齒輪的輪廓 window.onload=function(){ // 設定 data/py 為共用程式路徑 brython({debug:1, pythonpath:['./../data/py']}); } from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx-rp, midy, midx+rp, midy) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(-9,10,+1): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) canvas = doc['onegear2'] ctx = canvas.getContext(\"2d\") x = (500)/2 y = (500)/2 r = 0.8*(500/2) # 齒數 n = 36 # 壓力角 pa = 20 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") ctx.beginPath() ctx.fillStyle = \" #2894FF\" ctx.font = \"35px ScriptS\" ctx.fillText(\"40423248 \",200,240) ctx.stroke() 3.編寫一個可以採圓心座標, 節圓半徑, 齒數, 壓力角與定位角度作為輸入的齒輪程式函式 # 導入 browser 模組中的 document, 並設為 doc 變數 from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) # 準備在 id=\"gear3\" 的 canvas 中繪圖 canvas = doc[\"gear3\"] ctx = canvas.getContext(\"2d\") # 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角 # 壓力角 pa 單位為角度 pa = 20 # 第1齒輪齒數 n_g1 = 16 # 第2齒輪齒數 n_g2 = 18 # 第3齒輪齒數 n_g3 = 20 # 第4齒輪齒數 n_g4 = 22 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 m = (0.8*canvas.width)/(n_g1+n_g2+n_g3+n_g4) # 根據模數 m, 計算各齒輪的節圓半徑 rp_g1 = m*n_g1/2 rp_g2 = m*n_g2/2 rp_g3 = m*n_g3/2 rp_g4 = m*n_g4/2 #單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") # 開始繪製囓合齒輪輪廓 # 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離 x_g1 = canvas.width*0.1+rp_g1 # y 方向繪圖區域上方預留 canvas.height 的 20% y_g1 = canvas.height*0.2+rp_g1 # 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同 x_g2 = x_g1 + rp_g1 + rp_g2 y_g2 = y_g1 # 第3齒輪的圓心座標 x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3 y_g3 = y_g1 # 第4齒輪的圓心座標 x_g4 = x_g1 + rp_g1 + 2*rp_g2 + 2*rp_g3+rp_g4 y_g4 = y_g1 # 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2 # 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖 ctx.save() # translate to the origin of second gear ctx.translate(x_g1, y_g1) # rotate to engage ctx.rotate(math.pi/2) # put it back ctx.translate(-x_g1, -y_g1) # 繪製第一個齒輪輪廓 Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, \"green\") ctx.restore() ctx.beginPath() ctx.fillStytle = \"#54003b\" ctx.font = \"20px ScriptS\" ctx.fillText(\"40423222\",x_g1-30,y_g1) ctx.stroke() # 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g2, y_g2) # rotate to engage ctx.rotate(-math.pi/2-math.pi/n_g2) # put it back ctx.translate(-x_g2, -y_g2) Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, \"black\") ctx.restore() ctx.beginPath() ctx.fillStytle = \"#4c5400\" ctx.font = \"20px ScriptS\" ctx.fillText(\"40423228\",x_g2-30,y_g2) ctx.stroke() # 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g3, y_g3) # rotate to engage # math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度 # 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快 # 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度 # -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合 # (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, # 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, # 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3 ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3) # put it back ctx.translate(-x_g3, -y_g3) Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, \"grey\") ctx.restore() ctx.beginPath() ctx.fillStytle = \"#005426\" ctx.font = \"20px ScriptS\" ctx.fillText(\"40423245\",x_g3-30,y_g3) ctx.stroke() # 將第4齒輪逆時鐘轉 90 度之後, 再往回轉第3齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第3齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g4, y_g4) # rotate to engage ctx.rotate(-math.pi/2-math.pi/n_g4+(math.pi+math.pi/n_g2)*n_g2/n_g3+(math.pi+math.pi/n_g3)*n_g3/n_g4) # put it back ctx.translate(-x_g4, -y_g4) Spur(ctx).Gear(x_g4, y_g4, rp_g4, n_g4, pa, \"blue\") ctx.restore() ctx.beginPath() ctx.fillStytle = \"#020054\" ctx.font = \"20px ScriptS\" ctx.fillText(\"40423248\",x_g4-30,y_g4) ctx.stroke() 4. 請依照上述規劃, 在 Onshape 完成相同齒輪組的囓合協同繪圖.","title":"2017CD第十五週"},{"tags":"Course","url":"./2017springCD-Week14.html","text":"第十四週上課內容 架設ubuntu伺服器 Ubuntu簡介: Ubuntu是基於Debian的Linux發行版。Debian的版本更新時間不固定，但Ubuntu會固定在每年的4月和10月釋出新版(每半年一新版)，版本號碼就是「年份.月份」，例如在2014年4月發佈的版本，號碼就是14.04；在2009年10月發佈的版本，號碼就是9.10。通常每隔兩年會釋出一個更新支援期長達2年以上的LTS(Long Term Support)版本，例如10.04、12.04、14.04、16.04就是LTS版，LTS版本因為支援期長，有很多時間修復BUG，因此愈後期的LTS版，執行起來會更穩定，如果有架設伺服器的需求，安裝LTS版本會是較好的選擇，尤其又以安裝專門用來架設伺服器的Ubuntu Server最好。 Ubuntu Server 14.04支援到西元2019年4月，可說是目前最穩定的Ubuntu伺服器版本。 安裝程式Ubuntu Server 14.04:http://www.ubuntu-tw.org/ (正體中文) 安裝光碟或USB: 從Ubuntu正體中文站下載下來的安裝程式為iso映像檔，如果要在電腦開機的時候進入Ubuntu Server，需要將iso映像檔燒錄成可開機的光碟，或是將iso映像檔用UNetbootin等軟體裝入USB儲存裝置中，製作成可開機的USB裝置。 安裝程序: 首先放入Ubuntu Server的開機光碟或是USB裝置，接著將電腦重新開機，進入BIOS的開機順序設定，將第一順位的開機裝置改為Ubuntu Server的所在裝置，儲存設定後重新開機。接著應該會看到類似以下的畫面，需要先選擇想使用的語言，建議使用國際語言─英文(English)。 然後會出現如下的選單。選擇「Install Ubuntu Server」即可開啟Ubuntu Server的安裝程式。 進入Ubuntu Server的安裝程式後，還要再選擇一次語言，建議選擇英文(English)。 接著選擇使用伺服器的位置，如果位置在台灣(Taiwan)，就選擇「亞洲(Asia)->台灣(Taiwan)」。 接著要設定系統會使用到的語系，建議值為「United States - en_US.UTF-8」。 再來要設定鍵盤排列方式，沒有特殊需求的話，使用手動設定，並選擇「English(US)」就好。 等待一段時間讓安裝程式自行處理一下。","title":"2017CD第十四週"},{"tags":"Course","url":"./2017springCD-Week13.html","text":"第十三週上課內容 用OnShape來繪製漸開線齒輪 參考: 齒輪資料","title":"2017CD第十三週"},{"tags":"Course","url":"./2017springCD-Week12.html","text":"第十二週上課內容 使用漸開線原理, 用 Brython來繪製單一個正齒輪的輪廓 window.onload=function(){ // 設定 data/py 為共用程式路徑 brython({debug:1, pythonpath:['./../data/py']}); } from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) canvas = doc['onegear'] ctx = canvas.getContext(\"2d\") x = (canvas.width)/2 y = (canvas.height)/2 r = 0.8*(canvas.height/2) # 齒數 n = 53 # 壓力角 pa = 20 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") 單一正齒輪程式碼 window.onload=function(){ // 設定 data/py 為共用程式路徑 brython({debug:1, pythonpath:['./../data/py']}); } 單一正齒輪程式碼 window.onload=function(){ // 設定 data/py 為共用程式路徑 brython({debug:1, pythonpath:['./../data/py']}); } from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) canvas = doc['onegear'] ctx = canvas.getContext(\"2d\") x = (canvas.width)/2 y = (canvas.height)/2 r = 0.8*(canvas.height/2) # 齒數 n = 53 # 壓力角 pa = 20 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") # 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容 from browser import document as doc # 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換 from browser import window import math # 主要用來取得畫布大小 canvas = doc[\"cango_gear\"] # 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx #ctx = canvas.getContext(\"2d\") cango = window.Cango.new # 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換 shapedefs = window.shapeDefs # 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形 # in CangoAnimation.js #interpolate1 = window.interpolate # Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件 cobj = window.Cobj.new creategeartooth = window.createGearTooth.new # 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id=\"cango_gear\" 的 canvas 上 cgo = cango(\"cango_gear\") ###################################### # 畫正齒輪輪廓 ##################################### # n 為齒數 n = 17 # pa 為壓力角 pa = 25 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth m = 0.8*canvas.width/n # pr 為節圓半徑 pr = n*m/2 # gear Pitch radius # generate gear data = creategeartooth(m, n, pa) # Brython 程式中的 print 會將資料印在 Browser 的 console 區 #print(data) gearTooth = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中 gear = gearTooth.dup() # gear 為單一齒的輪廓資料 #cgo.render(gearTooth) # 利用單齒輪廓旋轉, 產生整個正齒輪外形 for i in range(1, n): # 將 gearTooth 中的資料複製到 newTooth newTooth = gearTooth.dup() # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear newTooth.rotate(360*i/n) # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號 gear.appendPath(newTooth, True) # trim move command = True # 建立軸孔 # add axle hole, hr 為 hole radius hr = 0.6*pr # diameter of gear shaft shaft = cobj(shapedefs.circle(hr), \"PATH\") shaft.revWinding() gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path cx = canvas.width/2 cy = canvas.height/2 gear.translate(cx, cy) # render 繪出靜態正齒輪輪廓 cgo.render(gear) 設法處理兩種正齒輪嚙合的協同繪圖 (17t-11t-13t): # 導入 browser 模組中的 document, 並設為 doc 變數 from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) # 準備在 id=\"gear3\" 的 canvas 中繪圖 canvas = doc[\"gear3\"] ctx = canvas.getContext(\"2d\") # 模數決定齒的尺寸大小, 囓合齒輪組必須有相同的模數與壓力角 # 壓力角 pa 單位為角度 pa = 20 # 第1齒輪齒數 n_g1 = 17 # 第2齒輪齒數 n_g2 = 11 # 第3齒輪齒數 n_g3 = 13 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 m = (0.8*canvas.width)/(n_g1+n_g2+n_g3) # 根據模數 m, 計算各齒輪的節圓半徑 rp_g1 = m*n_g1/2 rp_g2 = m*n_g2/2 rp_g3 = m*n_g3/2 #單一正齒輪繪圖呼叫格式 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") # 開始繪製囓合齒輪輪廓 # 繪圖第1齒輪的圓心座標, 因為希望繪圖佔去 canvas.width 的 80%, 所以兩邊各預留 10% 距離 x_g1 = canvas.width*0.1+rp_g1 # y 方向繪圖區域上方預留 canvas.height 的 20% y_g1 = canvas.height*0.2+rp_g1 # 第2齒輪的圓心座標, 假設排列成水平, 表示各齒輪圓心 y 座標相同 x_g2 = x_g1 + rp_g1 + rp_g2 y_g2 = y_g1 # 第3齒輪的圓心座標 x_g3 = x_g1 + rp_g1 + 2*rp_g2 + rp_g3 y_g3 = y_g1 # 將第1齒輪順時鐘轉 90 度, 也就是 math.pi/2 # 使用 ctx.save() 與 ctx.restore() 以確保各齒輪以相對座標進行旋轉繪圖 ctx.save() # translate to the origin of second gear ctx.translate(x_g1, y_g1) # rotate to engage ctx.rotate(math.pi/2) # put it back ctx.translate(-x_g1, -y_g1) # 繪製第一個齒輪輪廓 Spur(ctx).Gear(x_g1, y_g1, rp_g1, n_g1, pa, \"blue\") ctx.restore() # 將第2齒輪逆時鐘轉 90 度之後, 再多轉一齒, 以便與第1齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g2, y_g2) # rotate to engage ctx.rotate(-math.pi/2-math.pi/n_g2) # put it back ctx.translate(-x_g2, -y_g2) Spur(ctx).Gear(x_g2, y_g2, rp_g2, n_g2, pa, \"black\") ctx.restore() # 將第3齒輪逆時鐘轉 90 度之後, 再往回轉第2齒輪定位帶動轉角, 然後再逆時鐘多轉一齒, 以便與第2齒輪進行囓合 ctx.save() # translate to the origin of second gear ctx.translate(x_g3, y_g3) # rotate to engage # math.pi+math.pi/n_g2 為第2齒輪從順時鐘轉 90 度之後, 必須配合目前的標記線所作的齒輪 2 轉動角度, 要轉換到齒輪3 的轉動角度 # 必須乘上兩齒輪齒數的比例, 若齒輪2 大, 則齒輪3 會轉動較快 # 第1個 -math.pi/2 為將原先垂直的第3齒輪定位線逆時鐘旋轉 90 度 # -math.pi/n_g3 則是第3齒與第2齒定位線重合後, 必須再逆時鐘多轉一齒的轉角, 以便進行囓合 # (math.pi+math.pi/n_g2)*n_g2/n_g3 則是第2齒原定位線為順時鐘轉動 90 度, # 但是第2齒輪為了與第1齒輪囓合, 已經距離定位線, 多轉了 180 度, 再加上第2齒輪的一齒角度, 因為要帶動第3齒輪定位, # 這個修正角度必須要再配合第2齒與第3齒的轉速比加以轉換成第3齒輪的轉角, 因此乘上 n_g2/n_g3 ctx.rotate(-math.pi/2-math.pi/n_g3+(math.pi+math.pi/n_g2)*n_g2/n_g3) # put it back ctx.translate(-x_g3, -y_g3) Spur(ctx).Gear(x_g3, y_g3, rp_g3, n_g3, pa, \"red\") ctx.restore()","title":"2017CD第十二週"},{"tags":"Course","url":"./2017springCD-Week11.html","text":"第十一週上課內容 1.小組協同閱讀兩本電子書翻譯並寫下心得 這裡為Onshape's Greatest Tech Tips– Volume 1.pdf 一.比較指令: 提供了可以檢視每次版本的不同,在設計時從原本的架構或是草圖,到後來隨著時間過去愈加愈多東西上去,就形成了許多的版次, Onshape的比較指令就是用來做現在的版本與過去的版本的對照,在版本和歷史的部分用下拉式選單裡面點Compare,就可以使用,可以和之前的任意 版本做外觀和特徵的差異 二.跟隨模式: 可以在Onshape線上即時的和你的夥伴修改和討論產品的外觀和細節,點右上方的social cue就可以開啟此功能,能夠即時的看到夥伴的螢幕狀況, 要離開時只要在圖像上的任意處點一下左鍵就可以離開,不用像以前的CAD軟體要協同作業還需要用電子郵件或傳送截圖,又或是版本不相容等許多的問題, Onshape的線上功能已經克服了這些問題,提供有效率又即時的線上協同工作環境 三.匯入/導入DXF檔案: DXF和DWG檔案是現在工業2D繪圖部分重要的標準,在Onshape裡面要導入DXF和DWG檔案可以點左上方的箭頭圖案,或是左下方的+圖案,裡面的選單也有導入的箭頭圖案, 點選導入後就可以瀏覽你想要導入的檔案,選擇你要的檔案來開啟,就可以導入至文件中,這時候可以做修改,也可以用此2D草圖來作3D建模,而要導出DXF檔的方式有兩 種,第一種是用右鍵點一下在繪圖介面上的繪圖標籤,就有導出,第二個是用右鍵點一下草圖的任意面,也有導出DXF的選項,之後就是一些選項調整,不用做繁雜的手續 來轉換檔案,只需要點個幾下就可以導入導出DXF或DWG檔案 四.捷徑工具列 Onshape的捷徑工具列讓使用指令變的更方便,要用工具列只要在畫面上按一下S,工具列就會出現在繪圖畫面上的游標旁邊,而捷徑工具列的設定方式可以在帳號設定 找到,打開後點偏好選項就可以開始自訂功能,要加入指令需要選取想要自訂的工具列,再選取草圖,零件,組裝,接著就可以加入想要的指令 五.加入評論 對於設計團隊來說在3D模型中加入評論是相當簡單而且是相當有效率的方式,可以在線上討論作品的問題或細節處理,不用寄送電子郵件來討論,在Onshape的頁面右上角 評論的圖示,可以把評論當成簡單的工具,能儲存和設計有關的註記,或是在線上即時和夥伴即時討論問題,也可以標記一些特定的特徵,不用互相傳截圖或電子郵件,是很 方便的功能 六.插入時的快照模式 快照模式可以更快建立組裝件,在插入零件時快照模式也能支援,只限定在自訂義連接配合時能用,用一個步驟就可以插入和配合零件,快照模式是從組裝工具列中調用或是按 鍵盤上的S鍵,點選要連接的兩個零件的配合點,然後點著和壓著左鍵並拖曳到目標的配合點,當你把零件拖曳到可能的配合點,Onshape就會顯示出圖像預覽,如果不想要這 個位置還可以再移到其他地方,可以省去一些時間,也能看到零件配合的預覽狀況,再慢慢作調整 七.綠色查驗(確認)以插入零件 在組合零件時的插入零件可以用綠色查驗(確認)來取代原有的零件,可以省去一開始要配對零件的時間,但零件仍需要固定,第一步要做的事是先插入第一個零件,在工具列 中點插入的指令,就會出現插入零件和組裝件的對話框,只要點選你想要的零件或多個零件就會看到該零件出現在頁面圖像中,但要注意一般在組裝視窗中插入的零件你會想 要零件是放在正中央的,這表示要取代第一個零件你不能在組裝件視窗中的空位處點左鍵,這樣零件會亂跑,反之,用左鍵點插入零件和組裝件的對話框中的綠色查驗(確認), 插入的零件就會自動取代原有的零件 八.多重瀏覽器標籤 你可以在Onshape頁面中開啟許多的網頁標籤(視窗),想開幾個都可以,因為Onshape是以瀏覽器來運行,是以瀏覽器的基礎來運作,所以可以在頁面中同時開啟許多網頁標籤(視窗), Onshape也支援多重螢幕顯示,可以把網頁標籤(視窗)移到其他螢幕上,能夠處理好幾個零件或組裝件,而當其中的一個零件被修改後在其他有這個零件的視窗(如組裝件)就會即時 變化,可以看到前後的差異,也可以在頁面標籤上點右鍵按在新瀏覽器標籤中開啟,這樣可以同步處理好幾個不同的零件或組裝程序,不用到處找檔案,很方便 九.捲動到此/捲動到尾端 當特徵清單很長的時候可以在特徵歷史中前後捲動,找你想要重新檢視或修改的特徵,但是當特徵清單很長又有幾個特徵需要多次修改時,就要用到捲動到此/捲動到尾端得兩個功能, 在特徵清單中找到想要修改的特徵時,再此特徵上點右鍵按Roll to here(捲動到此)的指令,系統就會把特徵清單尾端定在這裡,當修改完畢時就在特徵列上按Roll to end(捲動到尾端), 系統就會把位置定回原來的尾端特徵,這樣要修改某個特徵時就不用到處找,找到就可以直接固定,不用弄得很麻煩 十.再導入檔案時按著Shift來點選檔案 能夠省去手動一個一個點你想要的檔案的時間,可以點個兩三下就導入很多的檔案,當你想要從其他的CAD系統中導入檔案時就會用到這功能,要導入檔案時按左上方的箭頭圖案, 或是左下方的+圖案,點選導入後就可以瀏覽你想要導入的檔案,這時按著Shift點第一個檔案再點最後一個檔案,全部的檔案都會被選取,就可以同時導入多個檔案 2.閱讀寫心得: Designing Linkages in Context: https://www.onshape.com/cad-blog/designing-linkages-in-context FeatureScript: https://www.onshape.com/cad-blog/featurescript-its-so-easy-an-engineer-can-do-it","title":"2017CD第十一週"},{"tags":"Course","url":"./2017springCD-Week10.html","text":"第十週上課內容 補上期中報告缺的東西","title":"2017CD第十週"},{"tags":"Course","url":"./2017springCD-Week9.html","text":"第九週上課內容 期中協同查驗與自評 1.Fossil Server 實習查驗 由組員或是組長在教室中用電腦建立fossil server,設定好使用者及密碼後再來是組員個別登錄上去,在wiki建立期中心得報告的格式,打入期中的心得 2.四連桿機構協同 Trace Point 查驗 各組員用solvespace畫出四連桿,追蹤 T 點軌跡座標並另外檔 (請以 midterm1.csv, midterm2.csv .... 依序命名) 各組組員請依學號遞增排序, 排序第1者負責分析 Length=50 的 T 點軌跡圖, 其餘組員則依序將 Length -5的方式來縮減上三角的尺寸 3.Fourbar Walker OnShape 零件協同繪圖與組立查驗 請各組依照基本尺寸規劃, 以協同方式在 OnShape 環境中完成四連桿四足行走機構, 並分別拍攝協同規劃與實際操作影片, 將影片送到 1) Youtube 2) Vimeo 以及各組的 Fossil Server. 2017CD 第九週-期中作業-四連桿機構協同 Trace Point 查驗 from 40423248 on Vimeo . 2017CD 第九週-期中作業-Fourbar Walker OnShape 零件協同繪圖與組立查驗 from 40423248 on Vimeo . 2017CD 第九週 Fourbar Walker V-REP模擬 from 40423248 on Vimeo .","title":"2017CD第九週"},{"tags":"Course","url":"./2017springCD-Week8.html","text":"第八週上課內容 期中自評 給自己打期中分數","title":"2017CD第八週"},{"tags":"Course","url":"./2017springCD-Week7.html","text":"第七週上課內容 none","title":"2017CD第七週"},{"tags":"Course","url":"./2017springCD-Week6.html","text":"第六週上課內容 1.用Onshape裡面的變數限制條件來繪製四連桿，並導入V-REP做動 2017CD 第六週 from 40423248 on Vimeo .","title":"2017CD第六週"},{"tags":"Course","url":"./2017springCD-Week5.html","text":"第五週上課內容 1.如何在fossil筆記倉儲頁面顯示作業內容 在WIKI裡新增一個與倉儲筆記同名稱的檔案，就會在FOSSIL筆記倉儲主頁顯示 建立時WIKI有三種格式，WIKI、MARKDOWN及HTML，安全性的排序:WIKI>MARKDOWN>HTML 2.把單連桿轉為.STL檔，再導入V-rep做動態模擬","title":"2017CD第五週"},{"tags":"Course","url":"./2017springCD-Week4.html","text":"第四週上課內容 1.了解x-windows , vnc , remote desktop , 的功能 2.組長建立fossil倉儲,編輯密碼,並把組員拉入 3.在Onshape或Slovespace中繪製單連桿機構並轉成stl檔案再導入V-REP做測試 2017CD 第四週 from 40423248 on Vimeo .","title":"2017CD第四週"},{"tags":"Course","url":"./2017springCD-Week3.html","text":"第三週上課內容 1.打網址進入 \"https://mde2a1.kmol.info/\" 看每週進度,點進wiki裡面的list,再點進2017springcd,就能看到每一週要做的事 2.改掉start的fossil路徑,用程式來找電腦的ip位置,再由組長創建該組的https架構,以便讓組員編輯 3.於課程網頁上的w3部分中從十部影片裡挑選兩部影片,做出中英文的字幕翻譯,並把字幕加入原影片中 4.用solvespace或Onshape繪製四連桿機構,尺寸為30,50,60公分 繪製完成把檔案轉成.stl檔,再導入v-rep做測試 2017CD 第三週 from 40423248 on Vimeo .","title":"2017CD第三週"},{"tags":"Course","url":"./2017springCD-Week2.html","text":"第二週上課內容 1.用python程式來找出缺課同學 到班級倉儲data下載W2資料夾裡的cd_w2.py和w2b_registered.txt，再來用程式碼印出分組名單、座位列表、缺席學生和學生總數 2.用solvespace繪製和組立四連桿機構,再轉檔用v-rep開啟 2017CD 第二週 from 40423248 on Vimeo .","title":"2017CD第二週"},{"tags":"Course","url":"./2017springCD-Week1.html","text":"第一週上課內容 1.本學期課程概要 登錄Github到老師的Mdecourse的倉儲看大綱 有介紹一些3D軟體的相聯性 概略介紹C和PYTHON的優缺點 2.用正確的方式打開Stunnel 進入tiny2017_700MB>data>stunnel>config裡面,修改stunnel.conf 內容中的最後一段IP位置,要先在cmd中用ipconfig/all找出自己的IPV4位置 把這個IPV4位置覆蓋掉stunnel.conf最後一段IP位置後儲存,再把fossil程式關掉 重新打開程式就會正常顯示 之後試著登錄https://192.168.1.24/2017springvcp_hw/index 要記得先Proxy的進階選項設定另外的IP選項 才可以進入裡面做登錄的動作 2017CD 第一週 from 40423248 on Vimeo .","title":"2017CD第一週"}]};